// <auto-generated />
using System;
using GroceryExpress.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GroceryExpress.DAL.Migrations
{
    [DbContext(typeof(GroceryExpressContext))]
    partial class GroceryExpressContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Box")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Box = "A",
                            City = "Example City",
                            Number = "123",
                            PostalCode = 12345,
                            Street = "Main Street"
                        },
                        new
                        {
                            Id = 2,
                            Box = "B",
                            City = "Sample Town",
                            Number = "456",
                            PostalCode = 67890,
                            Street = "Oak Avenue"
                        },
                        new
                        {
                            Id = 3,
                            Box = "F",
                            City = "New Town",
                            Number = "303",
                            PostalCode = 44556,
                            Street = "Birch Street"
                        },
                        new
                        {
                            Id = 4,
                            Box = "E",
                            City = "Another City",
                            Number = "202",
                            PostalCode = 11223,
                            Street = "Cedar Drive"
                        },
                        new
                        {
                            Id = 5,
                            Box = "D",
                            City = "Demo Town",
                            Number = "101",
                            PostalCode = 98765,
                            Street = "Pine Lane"
                        },
                        new
                        {
                            Id = 6,
                            Box = "D",
                            City = "Demo Town",
                            Number = "101",
                            PostalCode = 98765,
                            Street = "Pine Lane"
                        },
                        new
                        {
                            Id = 7,
                            Box = "C",
                            City = "Test City",
                            Number = "789",
                            PostalCode = 54321,
                            Street = "Maple Road"
                        },
                        new
                        {
                            Id = 8,
                            Box = "B",
                            City = "Sample Town",
                            Number = "456",
                            PostalCode = 67890,
                            Street = "Oak Avenue"
                        });
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "987-654-3210",
                            Username = "janesmith"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            BirthDate = new DateTime(1988, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PhoneNumber = "555-123-4567",
                            Username = "alicejohnson"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            BirthDate = new DateTime(1975, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.williams@example.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            PhoneNumber = "111-222-3333",
                            Username = "bobwilliams"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            BirthDate = new DateTime(1992, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eva.brown@example.com",
                            FirstName = "Eva",
                            LastName = "Brown",
                            PhoneNumber = "777-888-9999",
                            Username = "evabrown"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            BirthDate = new DateTime(1982, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.clark@example.com",
                            FirstName = "David",
                            LastName = "Clark",
                            PhoneNumber = "444-555-6666",
                            Username = "davidclark"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            BirthDate = new DateTime(1995, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace.miller@example.com",
                            FirstName = "Grace",
                            LastName = "Miller",
                            PhoneNumber = "999-000-1111",
                            Username = "gracemiller"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            BirthDate = new DateTime(1978, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sam.anderson@example.com",
                            FirstName = "Sam",
                            LastName = "Anderson",
                            PhoneNumber = "222-333-4444",
                            Username = "samanderson"
                        });
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Deliverer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deliverers");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.ItemOrder", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 2, 3, 14, 55, 43, 553, DateTimeKind.Local).AddTicks(4428));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<int>("DelivererId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("DelivererId");

                    b.HasIndex("Name");

                    b.HasIndex("ShopId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.ShopItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "ShopId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Customer", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.ItemOrder", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroceryExpress.DOMAIN.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Order", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GroceryExpress.DOMAIN.Entities.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("GroceryExpress.DOMAIN.Entities.Deliverer", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GroceryExpress.DOMAIN.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Deliverer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Shop", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.ShopItem", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroceryExpress.DOMAIN.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
