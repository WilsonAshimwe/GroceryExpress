// <auto-generated />
using System;
using GroceryExpress.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GroceryExpress.DAL.Migrations
{
    [DbContext(typeof(GroceryExpressContext))]
    partial class GroceryExpressContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Box")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Box = "A",
                            City = "Example City",
                            Number = "123",
                            PostalCode = 12345,
                            Street = "Main Street"
                        },
                        new
                        {
                            Id = 2,
                            Box = "B",
                            City = "Sample Town",
                            Number = "456",
                            PostalCode = 67890,
                            Street = "Oak Avenue"
                        },
                        new
                        {
                            Id = 3,
                            Box = "F",
                            City = "New Town",
                            Number = "303",
                            PostalCode = 44556,
                            Street = "Birch Street"
                        },
                        new
                        {
                            Id = 4,
                            Box = "E",
                            City = "Another City",
                            Number = "202",
                            PostalCode = 11223,
                            Street = "Cedar Drive"
                        },
                        new
                        {
                            Id = 5,
                            Box = "D",
                            City = "Demo Town",
                            Number = "101",
                            PostalCode = 98765,
                            Street = "Pine Lane"
                        },
                        new
                        {
                            Id = 6,
                            Box = "D",
                            City = "Demo Town",
                            Number = "101",
                            PostalCode = 98765,
                            Street = "Pine Lane"
                        },
                        new
                        {
                            Id = 7,
                            Box = "C",
                            City = "Test City",
                            Number = "789",
                            PostalCode = 54321,
                            Street = "Maple Road"
                        },
                        new
                        {
                            Id = 8,
                            Box = "B",
                            City = "Sample Town",
                            Number = "456",
                            PostalCode = 67890,
                            Street = "Oak Avenue"
                        });
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Deliverer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deliverers");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 768, DateTimeKind.Local).AddTicks(6936),
                            Brand = "Gala",
                            Category = "Fruits",
                            Description = "Fresh and juicy",
                            ImageUrl = "images\\galaapplejuiced.jpg",
                            Name = "Apple",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9729),
                            Brand = "Chiquita",
                            Category = "Fruits",
                            Description = "Ripe and sweet",
                            ImageUrl = "images\\Chiquitabanana.jpg",
                            Name = "Banana",
                            Price = 0.99m
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9749),
                            Brand = "Alpro",
                            Category = "Dairy",
                            Description = "Whole milk",
                            ImageUrl = "images\\alpromilk.jpg",
                            Name = "Milk",
                            Price = 2.49m
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9752),
                            Brand = "Jacquet",
                            Category = "Bakery",
                            Description = "Whole wheat bread",
                            ImageUrl = "images\\jacquetbread.jpg",
                            Name = "Bread",
                            Price = 2.29m
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9754),
                            Brand = "Maïski",
                            Category = "Meat",
                            Description = "Boneless skinless chicken breast",
                            ImageUrl = "images\\maiskichicken.jpg",
                            Name = "Chicken",
                            Price = 4.99m
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9759),
                            Brand = "Iglo",
                            Category = "Vegetables",
                            Description = "Fresh organic spinach",
                            ImageUrl = "images\\iglospinach.jpg",
                            Name = "Spinach",
                            Price = 1.49m
                        },
                        new
                        {
                            Id = 7,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9761),
                            Brand = "Alpro",
                            Category = "Dairy",
                            Description = "Low-fat yogurt",
                            ImageUrl = "images\\alproyogourt.jpg",
                            Name = "Yogurt",
                            Price = 1.79m
                        },
                        new
                        {
                            Id = 8,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9763),
                            Brand = "Columbus",
                            Category = "Other",
                            Description = "Large brown eggs",
                            ImageUrl = "images\\columbuseggs.jpg",
                            Name = "Eggs",
                            Price = 2.99m
                        },
                        new
                        {
                            Id = 9,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9765),
                            Brand = "Tropicana",
                            Category = "Beverages",
                            Description = "100% pure orange juice",
                            ImageUrl = "images\\tropicanaorangejuice.jpg",
                            Name = "Orange Juice",
                            Price = 3.49m
                        },
                        new
                        {
                            Id = 10,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9767),
                            Brand = "Galak",
                            Category = "SweetFood",
                            Description = "Milk chocolate bar",
                            ImageUrl = "images\\chocolatgalak.jpg",
                            Name = "Chocolate",
                            Price = 1.29m
                        },
                        new
                        {
                            Id = 11,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9769),
                            Brand = "Waitrose ",
                            Category = "Cerials",
                            Description = "Oat, wheat and barley flakes with mixed dried fruits, nuts and seeds",
                            ImageUrl = "images\\essentialfoodandnut.jpg",
                            Name = "Essential Fruit & Nut Muesli",
                            Price = 3m
                        },
                        new
                        {
                            Id = 12,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9777),
                            Brand = "Waitrose ",
                            Category = "Cerials",
                            Description = "Cereal (34 %) and Raisin (9.5 %) Bar Half Covered with Milk Chocolate (19 %).",
                            ImageUrl = "images\\LN_002834_BP_11.jpg",
                            Name = "Cadbury Brunch Bar Raisin",
                            Price = 1.55m
                        },
                        new
                        {
                            Id = 13,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9779),
                            Brand = "Waitrose ",
                            Category = "SweetFood",
                            Description = "Lemon flavoured soft bakes.",
                            ImageUrl = "images\\LN_895684_BP_11.jpg",
                            Name = "Lu Le Petit Citron Lemon Soft Bakes",
                            Price = 1.55m
                        },
                        new
                        {
                            Id = 14,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9780),
                            Brand = "Flash",
                            Category = "CleaningProduct",
                            Description = "Kitchen degreaser. Removes up to 100% of grease. With plant-based ingredient (12% of total surfactant, which are subject to processing).",
                            ImageUrl = "images\\LN_002490_BP_11.jpg",
                            Name = "Flash Task Kitchen Spray Fresh Citrus800ml",
                            Price = 2.5m
                        },
                        new
                        {
                            Id = 15,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9782),
                            Brand = "Nivea",
                            Category = "PersonalCare",
                            Description = "Instantly protects from 5 signs of skin irritation: burning, redness, dryness, tightness & micro cuts.",
                            ImageUrl = "images\\LN_060554_BP_11.jpg",
                            Name = "Nivea For Men Sensitive Gel200ml",
                            Price = 4.25m
                        },
                        new
                        {
                            Id = 16,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9783),
                            Brand = "Waitrose",
                            Category = "FrozenFoods",
                            Description = "Lovely frozen cod wihich is absolutely delicious.",
                            ImageUrl = "images\\LN_847760_BP_11.jpg",
                            Name = "Waitrose Frozen Cod Fillets MSC475g",
                            Price = 8.50m
                        },
                        new
                        {
                            Id = 17,
                            AddedDate = new DateTime(2024, 2, 13, 17, 58, 4, 769, DateTimeKind.Local).AddTicks(9785),
                            Brand = "Iglo",
                            Category = "FrozenFoods",
                            Description = "Basa fillets dusted in a flour breadcrumb coating, with sea salt and cracked black pepper",
                            ImageUrl = "images\\LN_821034_BP_11.jpg",
                            Name = "Young's Gastro Salt & Pepper Dusted Basa Fillets 2s310g",
                            Price = 4.50m
                        });
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.ItemOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            BirthDate = new DateOnly(1990, 1, 1),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            Role = "Customer",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            BirthDate = new DateOnly(1985, 5, 15),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "987-654-3210",
                            Role = "Customer",
                            Username = "janesmith"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            BirthDate = new DateOnly(1988, 8, 20),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PhoneNumber = "555-123-4567",
                            Role = "Customer",
                            Username = "alicejohnson"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            BirthDate = new DateOnly(1975, 3, 10),
                            Email = "bob.williams@example.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            PhoneNumber = "111-222-3333",
                            Role = "Customer",
                            Username = "bobwilliams"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            BirthDate = new DateOnly(1992, 11, 25),
                            Email = "eva.brown@example.com",
                            FirstName = "Eva",
                            LastName = "Brown",
                            PhoneNumber = "777-888-9999",
                            Role = "Customer",
                            Username = "evabrown"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            BirthDate = new DateOnly(1982, 7, 5),
                            Email = "david.clark@example.com",
                            FirstName = "David",
                            LastName = "Clark",
                            PhoneNumber = "444-555-6666",
                            Role = "Customer",
                            Username = "davidclark"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            BirthDate = new DateOnly(1995, 4, 15),
                            Email = "grace.miller@example.com",
                            FirstName = "Grace",
                            LastName = "Miller",
                            PhoneNumber = "999-000-1111",
                            Role = "Customer",
                            Username = "gracemiller"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            BirthDate = new DateOnly(1978, 9, 30),
                            Email = "sam.anderson@example.com",
                            FirstName = "Sam",
                            LastName = "Anderson",
                            PhoneNumber = "222-333-4444",
                            Role = "Customer",
                            Username = "samanderson"
                        });
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.ItemOrder", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.Item", "Item")
                        .WithMany("ItemOrders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroceryExpress.DOMAIN.Entities.Order", "Order")
                        .WithMany("ItemOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Order", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.User", b =>
                {
                    b.HasOne("GroceryExpress.DOMAIN.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Item", b =>
                {
                    b.Navigation("ItemOrders");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.Order", b =>
                {
                    b.Navigation("ItemOrders");
                });

            modelBuilder.Entity("GroceryExpress.DOMAIN.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
